// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/secmon-as-code/hatchery"
	"github.com/secmon-as-code/hatchery/pkg/metadata"
	"io"
	"sync"
)

// Ensure, that SourceMock does implement hatchery.Source.
// If this is not the case, regenerate this file with moq.
var _ hatchery.Source = &SourceMock{}

// SourceMock is a mock implementation of hatchery.Source.
//
//	func TestSomethingThatUsesSource(t *testing.T) {
//
//		// make and configure a mocked hatchery.Source
//		mockedSource := &SourceMock{
//			LoadFunc: func(ctx context.Context, dst hatchery.Destination) error {
//				panic("mock out the Load method")
//			},
//		}
//
//		// use mockedSource in code that requires hatchery.Source
//		// and then make assertions.
//
//	}
type SourceMock struct {
	// LoadFunc mocks the Load method.
	LoadFunc func(ctx context.Context, dst hatchery.Destination) error

	// calls tracks calls to the methods.
	calls struct {
		// Load holds details about calls to the Load method.
		Load []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Dst is the dst argument value.
			Dst hatchery.Destination
		}
	}
	lockLoad sync.RWMutex
}

// Load calls LoadFunc.
func (mock *SourceMock) Load(ctx context.Context, dst hatchery.Destination) error {
	if mock.LoadFunc == nil {
		panic("SourceMock.LoadFunc: method is nil but Source.Load was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Dst hatchery.Destination
	}{
		Ctx: ctx,
		Dst: dst,
	}
	mock.lockLoad.Lock()
	mock.calls.Load = append(mock.calls.Load, callInfo)
	mock.lockLoad.Unlock()
	return mock.LoadFunc(ctx, dst)
}

// LoadCalls gets all the calls that were made to Load.
// Check the length with:
//
//	len(mockedSource.LoadCalls())
func (mock *SourceMock) LoadCalls() []struct {
	Ctx context.Context
	Dst hatchery.Destination
} {
	var calls []struct {
		Ctx context.Context
		Dst hatchery.Destination
	}
	mock.lockLoad.RLock()
	calls = mock.calls.Load
	mock.lockLoad.RUnlock()
	return calls
}

// Ensure, that DestinationMock does implement hatchery.Destination.
// If this is not the case, regenerate this file with moq.
var _ hatchery.Destination = &DestinationMock{}

// DestinationMock is a mock implementation of hatchery.Destination.
//
//	func TestSomethingThatUsesDestination(t *testing.T) {
//
//		// make and configure a mocked hatchery.Destination
//		mockedDestination := &DestinationMock{
//			NewWriterFunc: func(ctx context.Context, md metadata.MetaData) (io.WriteCloser, error) {
//				panic("mock out the NewWriter method")
//			},
//		}
//
//		// use mockedDestination in code that requires hatchery.Destination
//		// and then make assertions.
//
//	}
type DestinationMock struct {
	// NewWriterFunc mocks the NewWriter method.
	NewWriterFunc func(ctx context.Context, md metadata.MetaData) (io.WriteCloser, error)

	// calls tracks calls to the methods.
	calls struct {
		// NewWriter holds details about calls to the NewWriter method.
		NewWriter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Md is the md argument value.
			Md metadata.MetaData
		}
	}
	lockNewWriter sync.RWMutex
}

// NewWriter calls NewWriterFunc.
func (mock *DestinationMock) NewWriter(ctx context.Context, md metadata.MetaData) (io.WriteCloser, error) {
	if mock.NewWriterFunc == nil {
		panic("DestinationMock.NewWriterFunc: method is nil but Destination.NewWriter was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Md  metadata.MetaData
	}{
		Ctx: ctx,
		Md:  md,
	}
	mock.lockNewWriter.Lock()
	mock.calls.NewWriter = append(mock.calls.NewWriter, callInfo)
	mock.lockNewWriter.Unlock()
	return mock.NewWriterFunc(ctx, md)
}

// NewWriterCalls gets all the calls that were made to NewWriter.
// Check the length with:
//
//	len(mockedDestination.NewWriterCalls())
func (mock *DestinationMock) NewWriterCalls() []struct {
	Ctx context.Context
	Md  metadata.MetaData
} {
	var calls []struct {
		Ctx context.Context
		Md  metadata.MetaData
	}
	mock.lockNewWriter.RLock()
	calls = mock.calls.NewWriter
	mock.lockNewWriter.RUnlock()
	return calls
}
